{"version":3,"sources":["service/MeteoService.js","components/ChartInfo.js","components/LastInfo.js","components/LiveInfo.js","components/MinuteInfo.js","App.js","index.js"],"names":["JSON","require","MeteoService","this","data","count","Promise","resolve","power","values","temperature","response","unit","value","time","dKToC","dkValue","toFixed","ChartInfo","props","state","powerChartData","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","temperatureChartData","powerInfo","temperatureInfo","setState","formatChartData","prevProps","prevPowerInfo","prevTemperatureInfo","prevTime","chartData","className","width","height","legend","display","options","scales","yAxes","ticks","fontSize","xAxes","React","Component","LastInfo","children","LiveInfo","lastPowerInfo","lastTemperatureInfo","MinuteInfo","powerMinuteData","borderWidth","hoverBackgroundColor","hoverBorderColor","temperatureMinuteData","minutePowerInfo","minuteTemperatureInfo","minuteTime","formatMinuteData","prevMinutePowerInfo","prevMinuteTemperatureInfo","prevMinuteTime","minuteData","meteoService","App","requestInfo","setInterval","fetch","then","resp","prevState","length","averagePower","slice","reduce","acc","it","parseFloat","push","averageTemperature","to","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.410840da.chunk.js","sourcesContent":["import { reject } from 'q';\n\nconst JSON = require('./data.json');\n\nclass MeteoService {\n  constructor () {\n    this.data = JSON;\n    this.count = 0\n  }\n\n  fetch() {\n    return new Promise(resolve => {\n      const power = this.data.power.values[this.count]\n      const temperature =this.data.temperature.values[this.count]\n\n      const response = {\n        power: {\n          unit: this.data.power.unit,\n          value: power.value,\n          time: power.time \n        },\n        temperature: {\n          unit: 'C',  \n          value: this.dKToC(temperature.value),\n          time: temperature.time\n        }\n      };\n\n      this.count++\n\n      resolve(response)\n    })\n  }\n\n  dKToC(dkValue) {\n    return ((dkValue / 10) - 273).toFixed(2)\n  }\n}\n\nexport default MeteoService;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Line } from 'react-chartjs-2';\nimport '../styles/components/chartInfo.scss';\n\n\n \n\nclass ChartInfo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      powerChartData : {\n        labels: [],\n        datasets: [\n          {\n            label: 'Power',\n            fill: true,\n            lineTension: 0.1,\n            backgroundColor: 'rgba(85, 162, 181, 0.6)',\n            borderColor: '#3f51b5',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: '#002129',\n            pointBackgroundColor: '#002129',\n            pointBorderWidth: 0,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: '#55a2b5',\n            pointHoverBorderColor: '#002129',\n            pointHoverBorderWidth: 2,\n            pointRadius: 3,\n            pointHitRadius: 10,\n            data: []\n          }\n        ]\n      },\n      temperatureChartData : {\n        labels: [],\n        datasets: [\n          {\n            label: 'Temperature',\n            fill: true,\n            lineTension: 0.5,\n            backgroundColor: 'rgba(204, 244, 227, 0.6)',\n            borderColor: '#00cc76',\n            borderCapStyle: 'butt',\n            borderDash: [],\n            borderDashOffset: 0.0,\n            borderJoinStyle: 'miter',\n            pointBorderColor: '#009688',\n            pointBackgroundColor:'#009688',\n            pointBorderWidth: 0,\n            pointHoverRadius: 5,\n            pointHoverBackgroundColor: '#9de6c8',\n            pointHoverBorderColor: '#009688',\n            pointHoverBorderWidth: 2,\n            pointRadius: 3,\n            pointHitRadius: 10,\n            data: []\n          }\n        ]\n      }\n    }\n  }\n\n  componentDidMount() {\n    const { \n      powerInfo, \n      temperatureInfo, \n      time \n    } = this.props;\n    const { \n      powerChartData, \n      temperatureChartData \n    } = this.state;\n\n    this.setState({\n      powerChartData: this.formatChartData(powerChartData, powerInfo, time),\n      temperatureChartData: this.formatChartData(temperatureChartData, temperatureInfo, time)\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    const { \n      powerInfo, \n      temperatureInfo, \n      time \n    } = this.props;\n    const { \n      powerInfo: prevPowerInfo, \n      temperatureInfo: prevTemperatureInfo, \n      time: prevTime \n    } = prevProps;\n    const { \n      powerChartData, \n      temperatureChartData \n    } = this.state;\n\n    if (powerInfo !== prevPowerInfo || temperatureInfo !== prevTemperatureInfo || time !== prevTime) {\n      this.setState({\n        powerChartData: this.formatChartData(powerChartData, powerInfo, time),\n        temperatureChartData: this.formatChartData(temperatureChartData, temperatureInfo, time)\n      })\n    }\n  }\n\n  formatChartData( chartData, data, labels) {\n    return {\n      ...chartData,\n      labels: labels,\n      datasets: [\n        { ...chartData.datasets[0], data: data }\n      ]\n    }\n  }\n\n  render() {\n    const { \n      powerChartData,  \n      temperatureChartData \n    } = this.state;\n\n    return(\n      <section className=\"chartInfo\">\n        <h2 className=\"chartInfo__title\">Live stream information</h2>\n        <div className=\"chartInfo__wrapper wrapper\">\n          <h3 className=\"chartInfo__chart-name\">Power</h3>\n          <Line className=\"chartInfo__data\"\n            data={powerChartData}\n            width={100}\n            height={50}\n            legend={{display: false}}\n            options={{\n              scales: {\n                  yAxes: [{\n                      ticks: {\n                          fontSize: 10\n                      }\n                  }],\n                  xAxes: [{\n                    ticks: {\n                        fontSize: 10\n                    }\n                }]\n              }\n            }}\n          />\n        </div>\n       <div className=\"chartInfo__wrapper wrapper\">\n          <h3 className=\"chartInfo__chart-name\">Temperature</h3>\n          <Line className=\"chartInfo__data\"\n            data={temperatureChartData}\n            width={100}\n            height={50}\n            legend={{display: false}}\n            options={{\n              scales: {\n                  yAxes: [{\n                      ticks: {\n                          fontSize: 10\n                      }\n                  }],\n                  xAxes: [{\n                    ticks: {\n                        fontSize: 10\n                    }\n                }]\n              }\n            }}\n          />  \n       </div>\n       \n      </section>\n  )\n  }\n}\n\nChartInfo.propTypes = {\n  powerInfo: PropTypes.arrayOf(PropTypes.string).isRequired,\n  temperatureInfo: PropTypes.arrayOf(PropTypes.string).isRequired,\n  time: PropTypes.arrayOf(PropTypes.string).isRequired,\n}\n\nexport default ChartInfo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/components/lastInfo.scss';\n\nconst LastInfo = (props) => {\n  const { children, value, unit } = props;\n\n  return(\n    <div className=\"lastInfo\">\n      <div className=\"lastInfo__icon\">\n        {children}\n      </div>\n      <p className=\"lastInfo__information\">{value}</p>\n      <p className=\"lastInfo__information\">{unit}</p>\n    </div>\n  )\n}\n\nLastInfo.propTypes = {\n  children: PropTypes.object.isRequired,\n  value: PropTypes.string,\n  unit: PropTypes.string\n}\n\nexport default LastInfo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ChartInfo from './ChartInfo';\nimport LastInfo from './LastInfo';\nimport '../styles/components/liveInfo.scss';\n\nconst LiveInfo = (props) => {\n  const {  \n    powerInfo, \n    temperatureInfo, \n    time, \n    lastPowerInfo, \n    lastTemperatureInfo \n  } = props;\n\n  return(\n      <div>\n        <ChartInfo \n          powerInfo={powerInfo} \n          temperatureInfo={temperatureInfo} \n          time={time}\n        />\n        <div className=\"liveInfo\">\n          <h2 className=\"liveInfo__title\">Last information</h2>\n          <div className=\"liveInfo__container\">\n            <LastInfo className=\"liveInfo__lastInfo\" \n              value={lastPowerInfo.value} \n              unit={lastPowerInfo.unit}\n            >\n              <i className=\"fas fa-bolt\"></i>\n            </LastInfo>\n            <LastInfo className=\"liveInfo__lastInfo\" \n              value={lastTemperatureInfo.value} \n              unit={lastTemperatureInfo.unit}\n            >\n              <i className=\"fas fa-thermometer-three-quarters\"></i>\n            </LastInfo>\n          </div>\n        </div>\n      </div>\n  )\n}\n\nLiveInfo.propTypes = {\n  powerInfo: PropTypes.arrayOf(PropTypes.string).isRequired,\n  temperatureInfo: PropTypes.arrayOf(PropTypes.string).isRequired,\n  time: PropTypes.arrayOf(PropTypes.string).isRequired,\n  lastPowerInfo: PropTypes.object.isRequired,\n  lastTemperatureInfo: PropTypes.object.isRequired\n}\n\nexport default LiveInfo;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Bar } from 'react-chartjs-2';\nimport '../styles/components/minuteInfo.scss';\n\nclass MinuteInfo extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      powerMinuteData: {\n        labels: [],\n        datasets: [\n          {\n            backgroundColor: 'rgba(85, 162, 181, 0.6',\n            borderColor: '#3f51b5',\n            borderWidth: 1,\n            hoverBackgroundColor: '#55a2b5',\n            hoverBorderColor: '#002129',\n            data: []\n          }\n        ]\n      },\n      temperatureMinuteData: {\n        labels: [],\n        datasets: [\n          {\n            backgroundColor: 'rgba(204, 244, 227, 0.6)',\n            borderColor: '#00cc76',\n            borderWidth: 1,\n            hoverBackgroundColor: '#9de6c8',\n            hoverBorderColor: '#009688',\n            data: []\n          }\n        ]\n      } \n    }\n  }\n\n\n  componentDidMount() {\n    const { \n      minutePowerInfo, \n      minuteTemperatureInfo, \n      minuteTime \n    } = this.props;\n    const { \n      powerMinuteData,  \n      temperatureMinuteData \n    } = this.state;\n    \n    this.setState({\n      powerMinuteData: this.formatMinuteData(powerMinuteData, minutePowerInfo, minuteTime),\n      temperatureMinuteData: this.formatMinuteData(temperatureMinuteData, minuteTemperatureInfo, minuteTime)\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    const { \n      minutePowerInfo, \n      minuteTemperatureInfo, \n      minuteTime \n    } = this.props;\n    const { \n      minutePowerInfo: prevMinutePowerInfo, \n      minuteTemperatureInfo: prevMinuteTemperatureInfo, \n      minuteTime: prevMinuteTime \n    } = prevProps;\n    const { \n      powerMinuteData,  \n      temperatureMinuteData \n    } = this.state;\n\n    if(minutePowerInfo !== prevMinutePowerInfo || minuteTemperatureInfo !== prevMinuteTemperatureInfo || minuteTime !== prevMinuteTime)\n      this.setState({\n        powerMinuteData: this.formatMinuteData(powerMinuteData, minutePowerInfo, minuteTime),\n        temperatureMinuteData: this.formatMinuteData(temperatureMinuteData, minuteTemperatureInfo, minuteTime)\n      })\n  }\n\n  formatMinuteData( minuteData, data, labels) {\n    return {\n      ...minuteData,\n      labels: labels,\n      datasets: [\n        {...minuteData.datasets[0], data: data}\n      ]\n    }\n  }\n\n  render() {\n    const { \n      powerMinuteData, \n      temperatureMinuteData \n    } = this.state;\n    return(\n        <section className=\"minuteInfo\">\n          <h2 className=\"minuteInfo__title\">Summary by minute</h2>\n          <div className=\"minuteInfo__wrapper wrapper\">\n            <h3 className=\"minuteInfo__minute-name\">Power</h3>\n            <Bar className=\"minuteInfo__data\"\n              data={powerMinuteData}\n              width={100}\n              height={50}\n              legend={{display: false}}\n              options={{\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            fontSize: 10\n                        }\n                    }],\n                    xAxes: [{\n                      ticks: {\n                          fontSize: 10\n                      }\n                  }]\n                }\n              }}\n            />\n          </div>\n          <div className=\"minuteInfo__wrapper wrapper\">\n            <h3 className=\"minuteInfo__minute-name\">Temperature</h3>\n            <Bar className=\"minuteInfo__data\"\n              data={temperatureMinuteData}\n              width={100}\n              height={50}\n              legend={{display: false}}\n              options={{\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            fontSize: 10\n                        }\n                    }],\n                    xAxes: [{\n                      ticks: {\n                          fontSize: 10\n                      }\n                  }]\n                }\n              }}\n            />\n          </div>\n        </section>\n    )\n  }\n}\n\nMinuteInfo.propTypes = {\n  minutePowerInfo: PropTypes.arrayOf(PropTypes.string).isRequired,\n  minuteTemperatureInfo: PropTypes.arrayOf(PropTypes.string).isRequired,\n  minuteTime: PropTypes.arrayOf(PropTypes.string).isRequired,\n}\n\nexport default MinuteInfo;","import React from 'react';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport MeteoService from './service/MeteoService';\nimport LiveInfo from './components/LiveInfo';\nimport MinuteInfo from './components/MinuteInfo';\nimport './styles/components/app.scss';\n\nconst meteoService = new MeteoService()\nclass App extends React.Component {\n constructor(props) {\n   super(props)\n\n   this.state = {\n      lastPowerInfo: {},\n      lastTemperatureInfo: {},\n      powerInfo: [],\n      temperatureInfo: [],\n      time: [],\n      minutePowerInfo: [],\n      minuteTemperatureInfo: [],\n      minuteTime: []\n   }\n }\n\n componentDidMount() {\n   this.requestInfo ();\n   setInterval(() => {\n    this.requestInfo()\n  }, 5000);\n }\n\n requestInfo () {\n  meteoService.fetch().then(resp => {\n    this.setState(prevState => {\n      const {\n        powerInfo: prevPowerInfo, \n        temperatureInfo: prevTemperatureInfo, \n        time: prevTime,\n        minutePowerInfo: prevMinutePowerInfo,\n        minuteTemperatureInfo: prevMinuteTemperatureInfo,\n        minuteTime: prevMinuteTime\n       } = prevState;\n\n      const powerInfo =  [...prevPowerInfo, resp.power.value];\n      const temperatureInfo =  [...prevTemperatureInfo, resp.temperature.value];\n      const time = [...prevTime, resp.power.time];\n      const minutePowerInfo = [...prevMinutePowerInfo];\n      const minuteTemperatureInfo = [...prevMinuteTemperatureInfo];\n      const minuteTime = [...prevMinuteTime];\n\n      if(powerInfo.length % 12 === 0) {\n        const averagePower = powerInfo.slice(-12).reduce((acc, it) => acc + parseFloat(it), 0) / 12;\n        minutePowerInfo.push(averagePower.toFixed(3));\n        \n      }\n      if(temperatureInfo.length % 12 === 0) {\n        const averageTemperature = temperatureInfo.slice(-12).reduce((acc, it) => acc + parseFloat(it), 0) / 12;\n        minuteTemperatureInfo.push(averageTemperature.toFixed(3));\n      }\n\n      if(time.length % 12 === 0) {\n        minuteTime.push(resp.power.time)\n      }\n\n      return {\n        lastPowerInfo: resp.power,\n        lastTemperatureInfo: resp.temperature,\n        powerInfo,\n        temperatureInfo,\n        time,\n        minutePowerInfo,\n        minuteTemperatureInfo,\n        minuteTime\n       }\n     })\n  })\n }\n\n render() {\n  const { \n    powerInfo, \n    temperatureInfo, \n    time, \n    lastPowerInfo, \n    lastTemperatureInfo ,\n    minutePowerInfo,\n    minuteTemperatureInfo,\n    minuteTime\n  } = this.state;\n\n   return(\n     <>\n       <header className=\"header\">\n        <h1 className=\"header__title\">Meteologica S.A</h1>\n        <nav className=\"header__menu\">\n          <Link className=\"header__link\" to='/'>live stream</Link>\n          <Link className=\"header__link\" to='/minute'>summary by minute</Link>\n         </nav>\n       </header>\n       <main className=\"main\">\n         <div>\n            <Switch>\n              <Route exact path='/'>\n                <LiveInfo \n                  powerInfo={powerInfo.slice(-12)} \n                  temperatureInfo={temperatureInfo.slice(-12)} \n                  time={time.slice(-12)} \n                  lastPowerInfo={lastPowerInfo} \n                  lastTemperatureInfo={lastTemperatureInfo}\n                />\n              </Route>\n              <Route path='/minute'>\n                <MinuteInfo \n                  minutePowerInfo={minutePowerInfo.slice(-8)}\n                  minuteTemperatureInfo={minuteTemperatureInfo.slice(-8)}\n                  minuteTime={minuteTime.slice(-8)}\n                />    \n              </Route>\n            </Switch>\n         </div>\n       </main>\n       <footer className=\"footer\">\n         <span className=\"footer__copyright\">© 2019 Meteologica S.A.</span>\n       </footer>\n     </>\n   )\n }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}